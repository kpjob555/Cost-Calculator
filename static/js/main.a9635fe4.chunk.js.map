{"version":3,"sources":["components/Input/Input.js","components/Summary/Summary.js","container/CostCal/CostCal.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","ingredient","volume","price","unit","used","isActived","optionUnit","map","list","index","value","key","this","length","className","type","placeholder","onChange","event","setState","target","onClick","disabled","defaultValue","hidden","props","dataSubmit","Component","Summary","totalPrice","to","reset","CostCal","ingredients","ingredientsVolume","ingredientsPrice","ingredientsUsed","ingredientsUnit","setIngredient","totalPriceCalculated","concat","resetIngredient","showIngredient","ls","id","valueOfUsed","toPrecision","toSummary","exact","path","component","ingredientSub","volumeSub","priceSub","unitSub","usedSub","reduce","total","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9635fe4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Input.css'; \r\n\r\nclass Input extends Component {\r\n\r\n  state={\r\n    ingredient: [],\r\n    volume: [],\r\n    price: [],\r\n    unit: [],\r\n    used: [],\r\n    isActived: true\r\n  }\r\n\r\n  \r\n\r\n\r\n    render() {\r\n      const optionUnit = [\"มิลลิกรัม\",\"กรัม\",\"กิโลกรัม\",\"ฟอง\",\"มิลลิลิตร\",\"ลิตร\"].map((list, index) => {\r\n        return  <option value={list} key={index} >{list}</option>\r\n      })\r\n      let isActived = this.state.ingredient.length > 0? \r\n                        this.state.volume.length > 0? \r\n                          this.state.price.length >0? \r\n                            this.state.used.length>0? false: true \r\n                          : true \r\n                        : true \r\n                      : true;\r\n\r\n        return(\r\n          <div className=\"InputConfig\">\r\n            <input  type=\"text\" \r\n                    placeholder=\"วัตถุดิบ\" \r\n                    onChange={(event) => this.setState({ingredient: event.target.value})} value={this.state.ingredient} />\r\n            \r\n            <input  type=\"number\" \r\n                    placeholder=\"ปริมาณ\" \r\n                    onChange={(event) => this.setState({volume: event.target.value})} value={this.state.volume}/>\r\n\r\n            <select onClick={(event) => this.setState({unit: event.target.value})} disabled={this.state.volume.length > 0? false: true}>\r\n              <option defaultValue hidden>เลือกหน่วย</option>\r\n              {optionUnit}\r\n            </select>\r\n\r\n            <input  type=\"number\" \r\n                    placeholder=\"ราคา (บาท)\" \r\n                    onChange={(event) => this.setState({price: event.target.value})} value={this.state.price}/> \r\n\r\n            <input  type=\"number\" \r\n                    placeholder={\"ปริมาณที่ใช้ไป (\" + this.state.unit + \")\"} \r\n                    onChange={(event) => this.setState({used: event.target.value})} value={this.state.used}/>\r\n\r\n            <button type=\"submit\" \r\n                    onClick={() => {this.props.dataSubmit(this.state.ingredient, this.state.volume, this.state.price, this.state.unit, this.state.used) ; \r\n                                    this.setState({ingredient: [], volume: [], price: [], unit: [], used: []}) } \r\n                            }\r\n                    disabled={isActived}\r\n                            >คำนวณ</button>\r\n          \r\n          </div>\r\n        );\r\n      }\r\n} \r\n\r\nexport default Input;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Summary.css';\r\n\r\nconst Summary = (props) => (\r\n    <div className=\"Sum\">\r\n        <h3>วัตถุดิบทั้งหมด</h3>\r\n        <li>{props.ingredient}</li>\r\n        <h3>ราคาต้นทุน</h3>\r\n        <p>{props.totalPrice} บาท</p>\r\n        <button className=\"Back\"><Link to='/Cost-Calculator/' >กลับ</Link></button> \r\n        <button className=\"Fin\" onClick={props.reset} ><Link to='/Cost-Calculator/'>เสร็จสิ้น</Link></button>\r\n    </div>\r\n);\r\n\r\nexport default Summary;","import React, { Component } from 'react';\r\nimport { Route, NavLink, Redirect, Switch } from 'react-router-dom';\r\nimport Input from '../../components/Input/Input';\r\nimport Summary from '../../components/Summary/Summary';\r\nimport './CostCal.css';\r\n\r\n\r\nclass CostCal extends Component {\r\n\r\n    state = {\r\n        ingredients: [1],\r\n        ingredientsVolume: [],\r\n        ingredientsPrice: [],\r\n        ingredientsUsed: [],\r\n        ingredientsUnit: [],\r\n        totalPrice: []\r\n    }\r\n\r\n    setIngredient = (ingredient, volume, price, unit, used) => {\r\n      const totalPriceCalculated = (used*price/volume);\r\n        this.setState({\r\n            ingredients: this.state.ingredients.concat(ingredient),\r\n            ingredientsVolume: this.state.ingredientsVolume.concat(volume),\r\n            ingredientsPrice: this.state.ingredientsPrice.concat(price),\r\n            ingredientsUnit: this.state.ingredientsUnit.concat(unit),\r\n            ingredientsUsed: this.state.ingredientsUsed.concat(used),\r\n            totalPrice: this.state.totalPrice.concat(totalPriceCalculated)\r\n        });\r\n    }\r\n\r\n    resetIngredient = () => {\r\n        this.setState({\r\n            ingredients: [],\r\n            ingredientsVolume: [],\r\n            ingredientsPrice: [],\r\n            ingredientsUnit: [],\r\n            ingredientsUsed: [],\r\n            totalPrice: []\r\n        });\r\n    }\r\n\r\n  render() {\r\n    \r\n    const showIngredient = this.state.ingredients.map((ls, id) => {\r\n        const valueOfUsed = ((this.state.ingredientsUsed[id]*this.state.ingredientsPrice[id])/this.state.ingredientsVolume[id]).toPrecision(3);\r\n        return <div key={id} className=\"TextStyle\">\r\n                    <h4>Ingredient {id+1}  </h4> \r\n                        <p><b>วัตถุดิบ</b> : {ls} </p>\r\n                        <p><b>ปริมาณ</b> : {this.state.ingredientsVolume[id]} {this.state.ingredientsUnit[id]} </p>\r\n                        <p><b>ราคา</b> : {(this.state.ingredientsPrice[id]/this.state.ingredientsVolume[id]).toPrecision(3)} บาทต่อ {this.state.ingredientsUnit[id]} </p>\r\n                        <p><b>ปริมาณที่ใช้</b> : {this.state.ingredientsUsed[id]} {this.state.ingredientsUnit[id]}</p>\r\n                        <p><b>คิดเป็นเงิน</b> {valueOfUsed} บาท</p>\r\n        </div>\r\n    });\r\n\r\n    const toSummary = (this.state.ingredients.length > 0 ?  <button className=\"Summa\"><NavLink  to='/Cost-Calculator/summary'>สรุป</NavLink></button>: null )\r\n\r\n\r\n    return(\r\n      <div className=\"Area\">\r\n        \r\n        <Route exact path=\"/Cost-Calculator/\" component={() => (\r\n          <div> \r\n              <h2 className=\"headerName\">เครื่องคิดเลขคำนวณหาต้นทุน</h2>\r\n              <Input\r\n                  dataSubmit = {(ingredientSub, volumeSub, priceSub, unitSub, usedSub) => \r\n                                  this.setIngredient(ingredientSub, volumeSub, priceSub, unitSub, usedSub)}\r\n              />\r\n\r\n            <li>{showIngredient}</li> \r\n           {toSummary}\r\n          </div>\r\n          )} \r\n        ></Route>\r\n\r\n     \r\n\r\n     \r\n        <Route path=\"/Cost-Calculator/summary\" component={() => {\r\n          const totalPrice = this.state.totalPrice.reduce((total, ls) => {\r\n            return total + ls;\r\n          },0);\r\n          return (\r\n            <div>\r\n                <Summary ingredient = {this.state.ingredients.map((ls, id) => ( <div key={id}> {ls} </div> ))}\r\n                          totalPrice = {totalPrice}\r\n                          reset={() => this.resetIngredient()}              \r\n                />\r\n\r\n              \r\n            </div>\r\n            )\r\n          }} \r\n        />\r\n      \r\n      </div>\r\n    );\r\n  }\r\n} \r\n\r\nexport default CostCal;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom'\nimport CostCal from './container/CostCal/CostCal';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return(\n      <BrowserRouter>\n        <div>\n          <CostCal />\n          <h3 className=\"myCredit\">Made by MJDC beta 2</h3>\n        </div>\n      </BrowserRouter>\n    );\n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}