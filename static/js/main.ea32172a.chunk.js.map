{"version":3,"sources":["components/Input/Input.js","container/CostCal/CostCal.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","ingredient","volume","price","unit","used","isActived","this","length","className","type","placeholder","onChange","event","setState","target","value","onClick","disabled","defaultValue","hidden","props","dataSubmit","Component","CostCal","ingredients","ingredientsVolume","ingredientsPrice","ingredientsUsed","ingredientsUnit","numberOfIngregients","setIngredient","concat","showIngredient","map","ls","id","valueOfUsed","toPrecision","key","style","fontFamily","ingredientSub","volumeSub","priceSub","unitSub","usedSub","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea32172a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Input.css'; \r\n\r\nclass Input extends Component {\r\n\r\n  state={\r\n    ingredient: [],\r\n    volume: [],\r\n    price: [],\r\n    unit: [],\r\n    used: [],\r\n    isActived: true\r\n  }\r\n\r\n  \r\n\r\n\r\n    render() {\r\n\r\n      let isActived = this.state.ingredient.length > 0? \r\n                        this.state.volume.length > 0? \r\n                          this.state.price.length >0? \r\n                            this.state.used.length>0? false: true \r\n                          : true \r\n                        : true \r\n                      : true;\r\n        return(\r\n          <div className=\"InputConfig\">\r\n            <input  type=\"text\" \r\n                    placeholder=\"วัตถุดิบ\" \r\n                    onChange={(event) => this.setState({ingredient: event.target.value})} value={this.state.ingredient} />\r\n            \r\n            <input  type=\"number\" \r\n                    placeholder=\"ปริมาณ\" \r\n                    onChange={(event) => this.setState({volume: event.target.value})} value={this.state.volume}/>\r\n\r\n            <select onClick={(event) => this.setState({unit: event.target.value})} disabled={this.state.volume.length > 0? false: true}>\r\n              <option defaultValue hidden>เลือกหน่วย</option>\r\n              <option value=\"มิลลิกรัม\" >มิลลิกรัม</option>\r\n              <option value=\"กรัม\">กรัม</option>\r\n              <option value=\"กิโลกรัม\">กิโลกรัม</option>\r\n              <option value=\"ฟอง\">ฟอง</option>\r\n              <option value=\"มิลลิลิตร\">มิลลิลิตร</option>\r\n              <option value=\"ลิตร\">ลิตร</option>\r\n            </select>\r\n\r\n            <input  type=\"number\" \r\n                    placeholder=\"ราคา (บาท)\" \r\n                    onChange={(event) => this.setState({price: event.target.value})} value={this.state.price}/>\r\n\r\n            <input  type=\"number\" \r\n                    placeholder={\"ปริมาณที่ใช้ (\" + this.state.unit + \")\"} \r\n                    onChange={(event) => this.setState({used: event.target.value})} value={this.state.used}/>\r\n\r\n            <button type=\"submit\" \r\n                    onClick={() => {this.props.dataSubmit(this.state.ingredient, this.state.volume, this.state.price, this.state.unit, this.state.used) ; \r\n                                    this.setState({ingredient: [], volume: [], price: [], unit: [], used: []}) } \r\n                            }\r\n                    disabled={isActived}\r\n                            >คำนวณ</button>\r\n          \r\n          </div>\r\n        );\r\n      }\r\n} \r\n\r\nexport default Input;","import React, { Component } from 'react';\r\nimport Input from '../../components/Input/Input';\r\nimport './CostCal.css';\r\n\r\n\r\nclass CostCal extends Component {\r\n\r\n    state = {\r\n        ingredients: [1,2],\r\n        ingredientsVolume: [],\r\n        ingredientsPrice: [],\r\n        ingredientsUsed: [],\r\n        ingredientsUnit: [],\r\n        numberOfIngregients: []\r\n    }\r\n\r\n    setIngredient = (ingredient, volume, price, unit, used) => {\r\n        this.setState({\r\n            ingredients: this.state.ingredients.concat(ingredient),\r\n            ingredientsVolume: this.state.ingredientsVolume.concat(volume),\r\n            ingredientsPrice: this.state.ingredientsPrice.concat(price),\r\n            ingredientsUnit: this.state.ingredientsUnit.concat(unit),\r\n            ingredientsUsed: this.state.ingredientsUsed.concat(used)\r\n        });\r\n    }\r\n\r\n  render() {\r\n\r\n    const showIngredient = this.state.ingredients.map((ls, id) => {\r\n        const valueOfUsed = ((this.state.ingredientsUsed[id]*this.state.ingredientsPrice[id])/this.state.ingredientsVolume[id]).toPrecision(3);\r\n        return <div key={id} className=\"TextStyle\">\r\n                    <h4>Ingredient {id+1}  </h4> \r\n                        <p>วัตถุดิบ : {ls} </p>\r\n                        <p>ปริมาณ : {this.state.ingredientsVolume[id]} {this.state.ingredientsUnit[id]} </p>\r\n                        <p>ราคา : {(this.state.ingredientsPrice[id]/this.state.ingredientsVolume[id]).toPrecision(3)} บาทต่อ {this.state.ingredientsUnit[id]} </p>\r\n                        <p>ปริมาณที่ใช้ : {this.state.ingredientsUsed[id]} {this.state.ingredientsUnit[id]}</p>\r\n                        <p>คิดเป็นเงิน {valueOfUsed} บาท</p>\r\n        </div>\r\n    });\r\n\r\n\r\n    return(\r\n      <div>\r\n          <h1 style={{fontFamily: \"'Pridi', serif\"}}>สำหรับทดสอบ ยังไม่เสร็จสมบูรณ์ Version 0.0.1</h1>\r\n        <Input\r\n            dataSubmit = {(ingredientSub, volumeSub, priceSub, unitSub, usedSub) => this.setIngredient(ingredientSub, volumeSub, priceSub, unitSub, usedSub)}\r\n        />\r\n      \r\n      <li>{showIngredient}</li>\r\n      </div>\r\n    );\r\n  }\r\n} \r\n\r\nexport default CostCal;\r\n","import React, { Component } from 'react';\nimport CostCal from './container/CostCal/CostCal';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return(\n      <div>\n        <CostCal />\n      </div>\n    );\n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}